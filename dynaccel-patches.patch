From 2b9fb2509c5c9ca895c39461e6d86ca823e52f81 Mon Sep 17 00:00:00 2001
From: Dezzir <deezzir@gmail.com>
Date: Tue, 2 Aug 2022 22:21:05 -0400
Subject: [PATCH] dynaccel patches applied

---
 Kconfig                            |    7 +-
 Makefile                           |    2 +-
 README                             |   19 -
 README.md                          |    9 +
 drivers/ata/libata-core.c          |   19 +-
 drivers/ata/libata-eh.c            |   15 +-
 drivers/ata/libata-sata.c          |   11 +-
 drivers/ata/libata-scsi.c          |   11 +-
 drivers/ata/libata-sff.c           |   15 +-
 drivers/char/hw_random/core.c      |    3 +-
 drivers/cpuidle/governors/ladder.c |    2 +-
 drivers/input/input.c              |    5 +-
 drivers/input/keyboard/atkbd.c     |   11 +-
 drivers/input/serio/libps2.c       |   17 +-
 drivers/mmc/core/block.c           |    1 +
 drivers/mmc/core/core.c            |   25 +-
 drivers/mmc/core/mmc_ops.c         |    9 +-
 drivers/mmc/core/sd_ops.c          |    3 +-
 drivers/mmc/core/sdio_cis.c        |    3 +-
 drivers/mmc/core/sdio_io.c         |    3 +-
 drivers/mmc/core/sdio_irq.c        |    7 +-
 drivers/mmc/core/sdio_ops.c        |    3 +-
 drivers/mmc/host/mmci.c            |    5 +-
 drivers/mmc/host/sdhci.c           |   27 +-
 drivers/rtc/rtc-dev.c              |    3 +-
 drivers/scsi/scsi_error.c          |   13 +-
 drivers/scsi/scsi_ioctl.c          |    9 +-
 drivers/scsi/scsi_lib.c            |    3 +-
 drivers/scsi/scsi_sysfs.c          |    3 +-
 drivers/scsi/sd.c                  |   43 +-
 drivers/tty/n_tty.c                |    9 +-
 drivers/tty/tty_ioctl.c            |    3 +-
 drivers/tty/tty_port.c             |    5 +-
 drivers/tty/vt/keyboard.c          |    5 +-
 drivers/tty/vt/vt.c                |    9 +-
 drivers/tty/vt/vt_ioctl.c          |    3 +-
 fs/jbd2/journal.c                  |    5 +-
 fs/jbd2/transaction.c              |    3 +-
 fs/locks.c                         |    3 +-
 fs/select.c                        |    2 +
 include/linux/dynaccel.h           |   16 +
 include/uapi/linux/sysctl.h        |    1 +
 kernel/sched/loadavg.c             |    3 +-
 kernel/sysctl.c                    |    9 +
 kernel/time/timekeeping.c          |    7 +-
 kernel/time/timer.c                |    5 +-
 46 files changed, 220 insertions(+), 158 deletions(-)
 delete mode 100644 README
 create mode 100644 README.md
 create mode 100644 include/linux/dynaccel.h

diff --git a/Kconfig b/Kconfig
index 37afe2ac8..5d8884413 100644
--- a/Kconfig
+++ b/Kconfig
@@ -20,4 +20,9 @@ config RH_KABI_SIZE_ALIGN_CHECKS
 	  This option enables more stringent kabi checks. Those must be disable
 	  in case of a debug-build because they allow to change struct sizes.
 
-
+config SPEEDUP_RATIO 
+	int "Speedup Ratio"
+        range 1 1000
+        default 1 
+  	help
+	  The Speedup Multiplier for Dynamic Acceleration 
diff --git a/Makefile b/Makefile
index 53e27dba8..b8c562c03 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@
 VERSION = 4
 PATCHLEVEL = 18
 SUBLEVEL = 0
-EXTRAVERSION =
+EXTRAVERSION = -394.el8-dynaccel
 NAME = Merciless Moray
 
 #
diff --git a/README b/README
deleted file mode 100644
index 2c927ccbd..000000000
--- a/README
+++ /dev/null
@@ -1,19 +0,0 @@
-Linux kernel
-============
-
-There are several guides for kernel developers and users. These guides can
-be rendered in a number of formats, like HTML and PDF. Please read
-Documentation/admin-guide/README.rst first.
-
-In order to build the documentation, use ``make htmldocs`` or
-``make pdfdocs``.  The formatted documentation can also be read online at:
-
-    https://www.kernel.org/doc/html/latest/
-
-There are various text files in the Documentation/ subdirectory,
-several of them using the Restructured Text markup notation.
-See Documentation/00-INDEX for a list of what is contained in each file.
-
-Please read the Documentation/process/changes.rst file, as it contains the
-requirements for building and running the kernel, and information about
-the problems which may result by upgrading your kernel.
diff --git a/README.md b/README.md
new file mode 100644
index 000000000..849670369
--- /dev/null
+++ b/README.md
@@ -0,0 +1,9 @@
+### Dynamic Accelereted Linux kernel based on CentOS8s
+#### Version: 4.18.0-394.el8.x86_64
+---
+The idea originated from [this repository](https://github.com/ystk/dynamic-acceleration) </br>
+A presenation by the original authors (Toshiba) discribing this work is at [this PDF](https://elinux.org/images/6/6d/Linux_Kernel_Acceleration_for_Long-term_Testing.pdf)
+
+- **The kernel should be compiled under gcc-8 and g++-8** otherwise the compilation will fail. <br>
+- The speedup_ratio (acceleration) can be changed using ```sysctl```. Example: ```sysctl --write kernel.accel=50```. 
+The value can be displayed using ```cat /proc/sys/kernel/accel```
diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index 039acf7e3..c12a7c287 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -60,6 +60,7 @@
 #include <linux/log2.h>
 #include <linux/slab.h>
 #include <linux/glob.h>
+#include <linux/dynaccel.h>
 #include <scsi/scsi.h>
 #include <scsi/scsi_cmnd.h>
 #include <scsi/scsi_host.h>
@@ -1573,7 +1574,7 @@ unsigned ata_exec_internal_sg(struct ata_device *dev,
 
 	if (!timeout) {
 		if (ata_probe_timeout)
-			timeout = ata_probe_timeout * 1000;
+			timeout = ata_probe_timeout * 1000 * speedup_ratio;
 		else {
 			timeout = ata_internal_cmd_timeout(dev, command);
 			auto_timeout = 1;
@@ -3587,9 +3588,9 @@ int ata_wait_ready(struct ata_link *link, unsigned long deadline,
 
 	/* choose which 0xff timeout to use, read comment in libata.h */
 	if (link->ap->host->flags & ATA_HOST_PARALLEL_SCAN)
-		nodev_deadline = ata_deadline(start, ATA_TMOUT_FF_WAIT_LONG);
+		nodev_deadline = ata_deadline(start, ATA_TMOUT_FF_WAIT_LONG * speedup_ratio);
 	else
-		nodev_deadline = ata_deadline(start, ATA_TMOUT_FF_WAIT);
+		nodev_deadline = ata_deadline(start, ATA_TMOUT_FF_WAIT * speedup_ratio);
 
 	/* Slave readiness can't be tested separately from master.  On
 	 * M/S emulation configuration, this function should be called
@@ -3633,15 +3634,15 @@ int ata_wait_ready(struct ata_link *link, unsigned long deadline,
 		if (time_after(now, deadline))
 			return -EBUSY;
 
-		if (!warned && time_after(now, start + 5 * HZ) &&
-		    (deadline - now > 3 * HZ)) {
+		if (!warned && time_after(now, start + 5 * HZ * speedup_ratio) &&
+		    (deadline - now > 3 * HZ * speedup_ratio)) {
 			ata_link_warn(link,
 				"link is slow to respond, please be patient "
 				"(ready=%d)\n", tmp);
 			warned = 1;
 		}
 
-		ata_msleep(link->ap, 50);
+		ata_msleep(link->ap, 50 * speedup_ratio);
 	}
 }
 
@@ -3662,7 +3663,7 @@ int ata_wait_ready(struct ata_link *link, unsigned long deadline,
 int ata_wait_after_reset(struct ata_link *link, unsigned long deadline,
 				int (*check_ready)(struct ata_link *link))
 {
-	ata_msleep(link->ap, ATA_WAIT_AFTER_RESET);
+	ata_msleep(link->ap, ATA_WAIT_AFTER_RESET * speedup_ratio);
 
 	return ata_wait_ready(link, deadline, check_ready);
 }
@@ -4443,7 +4444,7 @@ unsigned int ata_dev_set_feature(struct ata_device *dev, u8 enable, u8 feature)
 
 	if (enable == SETFEATURES_SPINUP)
 		timeout = ata_probe_timeout ?
-			  ata_probe_timeout * 1000 : SETFEATURES_SPINUP_TIMEOUT;
+			  ata_probe_timeout * 1000 * speedup_ratio: SETFEATURES_SPINUP_TIMEOUT * speedup_ratio;
 	err_mask = ata_exec_internal(dev, &tf, NULL, DMA_NONE, NULL, 0, timeout);
 
 	DPRINTK("EXIT, err_mask=%x\n", err_mask);
@@ -6566,7 +6567,7 @@ u32 ata_wait_register(struct ata_port *ap, void __iomem *reg, u32 mask, u32 val,
 	deadline = ata_deadline(jiffies, timeout);
 
 	while ((tmp & mask) == val && time_before(jiffies, deadline)) {
-		ata_msleep(ap, interval);
+		ata_msleep(ap, interval * speedup_ratio);
 		tmp = ioread32(reg);
 	}
 
diff --git a/drivers/ata/libata-eh.c b/drivers/ata/libata-eh.c
index 13c324974..42cc86d52 100644
--- a/drivers/ata/libata-eh.c
+++ b/drivers/ata/libata-eh.c
@@ -32,6 +32,7 @@
 #include <linux/blkdev.h>
 #include <linux/export.h>
 #include <linux/pci.h>
+#include <linux/dynaccel.h>
 #include <scsi/scsi.h>
 #include <scsi/scsi_host.h>
 #include <scsi/scsi_eh.h>
@@ -808,7 +809,7 @@ void ata_port_wait_eh(struct ata_port *ap)
 
 	/* make sure SCSI EH is complete */
 	if (scsi_host_in_recovery(ap->scsi_host)) {
-		ata_msleep(ap, 10);
+		ata_msleep(ap, 10 * speedup_ratio);
 		goto retry;
 	}
 }
@@ -860,7 +861,7 @@ void ata_eh_fastdrain_timerfn(struct timer_list *t)
 		/* some qcs have finished, give it another chance */
 		ap->fastdrain_cnt = cnt;
 		ap->fastdrain_timer.expires =
-			ata_deadline(jiffies, ATA_EH_FASTDRAIN_INTERVAL);
+			ata_deadline(jiffies, ATA_EH_FASTDRAIN_INTERVAL * speedup_ratio);
 		add_timer(&ap->fastdrain_timer);
 	}
 
@@ -901,7 +902,7 @@ static void ata_eh_set_pending(struct ata_port *ap, int fastdrain)
 	/* activate fast drain */
 	ap->fastdrain_cnt = cnt;
 	ap->fastdrain_timer.expires =
-		ata_deadline(jiffies, ATA_EH_FASTDRAIN_INTERVAL);
+		ata_deadline(jiffies, ATA_EH_FASTDRAIN_INTERVAL * speedup_ratio);
 	add_timer(&ap->fastdrain_timer);
 }
 
@@ -1747,7 +1748,7 @@ static int speed_down_verdict_cb(struct ata_ering_entry *ent, void *void_arg)
  */
 static unsigned int ata_eh_speed_down_verdict(struct ata_device *dev)
 {
-	const u64 j5mins = 5LLU * 60 * HZ, j10mins = 10LLU * 60 * HZ;
+	const u64 j5mins = 5LLU * 60 * HZ * speedup_ratio, j10mins = 10LLU * 60 * HZ;
 	u64 j64 = get_jiffies_64();
 	struct speed_down_verdict_arg arg;
 	unsigned int verdict = 0;
@@ -2493,7 +2494,7 @@ int ata_eh_reset(struct ata_link *link, int classify,
 		now = jiffies;
 		WARN_ON(time_after(ehc->last_reset, now));
 		deadline = ata_deadline(ehc->last_reset,
-					ATA_EH_RESET_COOL_DOWN);
+					ATA_EH_RESET_COOL_DOWN * speedup_ratio);
 		if (time_before(now, deadline))
 			schedule_timeout_uninterruptible(deadline - now);
 	}
@@ -2537,7 +2538,7 @@ int ata_eh_reset(struct ata_link *link, int classify,
 
 	if (prereset) {
 		unsigned long deadline = ata_deadline(jiffies,
-						      ATA_EH_PRERESET_TIMEOUT);
+						      ATA_EH_PRERESET_TIMEOUT * speedup_ratio);
 
 		if (slave) {
 			sehc->i.action &= ~ATA_EH_RESET;
@@ -2597,7 +2598,7 @@ int ata_eh_reset(struct ata_link *link, int classify,
 	if (ata_is_host_link(link))
 		ata_eh_freeze_port(ap);
 
-	deadline = ata_deadline(jiffies, ata_eh_reset_timeouts[try++]);
+	deadline = ata_deadline(jiffies, ata_eh_reset_timeouts[try++] * speedup_ratio);
 
 	if (reset) {
 		if (verbose)
diff --git a/drivers/ata/libata-sata.c b/drivers/ata/libata-sata.c
index c16423e44..fc3dc62ab 100644
--- a/drivers/ata/libata-sata.c
+++ b/drivers/ata/libata-sata.c
@@ -9,6 +9,7 @@
 
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/dynaccel.h>
 #include <scsi/scsi_cmnd.h>
 #include <scsi/scsi_device.h>
 #include <linux/libata.h>
@@ -251,7 +252,7 @@ int sata_link_debounce(struct ata_link *link, const unsigned long *params,
 	last_jiffies = jiffies;
 
 	while (1) {
-		ata_msleep(link->ap, interval);
+		ata_msleep(link->ap, interval * speedup_ratio);
 		if ((rc = sata_scr_read(link, SCR_STATUS, &cur)))
 			return rc;
 		cur &= 0xf;
@@ -261,7 +262,7 @@ int sata_link_debounce(struct ata_link *link, const unsigned long *params,
 			if (cur == 1 && time_before(jiffies, deadline))
 				continue;
 			if (time_after(jiffies,
-				       ata_deadline(last_jiffies, duration)))
+				       ata_deadline(last_jiffies, duration * speedup_ratio)))
 				return 0;
 			continue;
 		}
@@ -318,7 +319,7 @@ int sata_link_resume(struct ata_link *link, const unsigned long *params,
 		 * debouncing.
 		 */
 		if (!(link->flags & ATA_LFLAG_NO_DB_DELAY))
-			ata_msleep(link->ap, 200);
+			ata_msleep(link->ap, 200 * speedup_ratio);
 
 		/* is SControl restored correctly? */
 		if ((rc = sata_scr_read(link, SCR_CONTROL, &scontrol)))
@@ -567,7 +568,7 @@ int sata_link_hardreset(struct ata_link *link, const unsigned long *timing,
 	/* Couldn't find anything in SATA I/II specs, but AHCI-1.1
 	 * 10.4.2 says at least 1 ms.
 	 */
-	ata_msleep(link->ap, 1);
+	ata_msleep(link->ap, 1 * speedup_ratio);
 
 	/* bring link back */
 	rc = sata_link_resume(link, timing, deadline);
@@ -591,7 +592,7 @@ int sata_link_hardreset(struct ata_link *link, const unsigned long *timing,
 			unsigned long pmp_deadline;
 
 			pmp_deadline = ata_deadline(jiffies,
-						    ATA_TMOUT_PMP_SRST_WAIT);
+						    ATA_TMOUT_PMP_SRST_WAIT * speedup_ratio);
 			if (time_after(pmp_deadline, deadline))
 				pmp_deadline = deadline;
 			ata_wait_ready(link, pmp_deadline, check_ready);
diff --git a/drivers/ata/libata-scsi.c b/drivers/ata/libata-scsi.c
index ae9821c44..9585ce012 100644
--- a/drivers/ata/libata-scsi.c
+++ b/drivers/ata/libata-scsi.c
@@ -34,6 +34,7 @@
 #include <linux/blkdev.h>
 #include <linux/spinlock.h>
 #include <linux/export.h>
+#include <linux/dynaccel.h>
 #include <scsi/scsi.h>
 #include <scsi/scsi_host.h>
 #include <scsi/scsi_cmnd.h>
@@ -422,7 +423,7 @@ int ata_cmd_ioctl(struct scsi_device *scsidev, void __user *arg)
 	/* Good values for timeout and retries?  Values below
 	   from scsi_ioctl_send_command() for default case... */
 	cmd_result = scsi_execute(scsidev, scsi_cmd, data_dir, argbuf, argsize,
-				  sensebuf, &sshdr, (10*HZ), 5, 0, 0, NULL);
+				  sensebuf, &sshdr, (10*HZ)*speedup_ratio, 5, 0, 0, NULL);
 
 	if (driver_byte(cmd_result) == DRIVER_SENSE) {/* sense data available */
 		u8 *desc = sensebuf + 8;
@@ -503,7 +504,7 @@ int ata_task_ioctl(struct scsi_device *scsidev, void __user *arg)
 	/* Good values for timeout and retries?  Values below
 	   from scsi_ioctl_send_command() for default case... */
 	cmd_result = scsi_execute(scsidev, scsi_cmd, DMA_NONE, NULL, 0,
-				sensebuf, &sshdr, (10*HZ), 5, 0, 0, NULL);
+				sensebuf, &sshdr, (10*HZ)*speedup_ratio, 5, 0, 0, NULL);
 
 	if (driver_byte(cmd_result) == DRIVER_SENSE) {/* sense data available */
 		u8 *desc = sensebuf + 8;
@@ -4379,7 +4380,7 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 		 * any progress, sleep briefly and repeat.
 		 */
 		if (dev != last_failed_dev) {
-			msleep(100);
+			msleep(100 * speedup_ratio);
 			last_failed_dev = dev;
 			goto repeat;
 		}
@@ -4388,7 +4389,7 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 		 * a few more chances.
 		 */
 		if (--tries) {
-			msleep(100);
+			msleep(100 * speedup_ratio);
 			goto repeat;
 		}
 
@@ -4397,7 +4398,7 @@ void ata_scsi_scan_host(struct ata_port *ap, int sync)
 	}
 
 	queue_delayed_work(system_long_wq, &ap->hotplug_task,
-			   round_jiffies_relative(HZ));
+			   round_jiffies_relative(HZ) * speedup_ratio);
 }
 
 /**
diff --git a/drivers/ata/libata-sff.c b/drivers/ata/libata-sff.c
index ee8cbafd3..8e9b83b4d 100644
--- a/drivers/ata/libata-sff.c
+++ b/drivers/ata/libata-sff.c
@@ -34,6 +34,7 @@
 #include <linux/module.h>
 #include <linux/libata.h>
 #include <linux/highmem.h>
+#include <linux/dynaccel.h>
 
 #include "libata.h"
 
@@ -219,7 +220,7 @@ int ata_sff_busy_sleep(struct ata_port *ap,
 	timeout = ata_deadline(timer_start, tmout_pat);
 	while (status != 0xff && (status & ATA_BUSY) &&
 	       time_before(jiffies, timeout)) {
-		ata_msleep(ap, 50);
+		ata_msleep(ap, 50 * speedup_ratio);
 		status = ata_sff_busy_wait(ap, ATA_BUSY, 3);
 	}
 
@@ -231,7 +232,7 @@ int ata_sff_busy_sleep(struct ata_port *ap,
 	timeout = ata_deadline(timer_start, tmout);
 	while (status != 0xff && (status & ATA_BUSY) &&
 	       time_before(jiffies, timeout)) {
-		ata_msleep(ap, 50);
+		ata_msleep(ap, 50 * speedup_ratio);
 		status = ap->ops->sff_check_status(ap);
 	}
 
@@ -357,7 +358,7 @@ static void ata_dev_select(struct ata_port *ap, unsigned int device,
 
 	if (wait) {
 		if (can_sleep && ap->link.device[device].class == ATA_DEV_ATAPI)
-			ata_msleep(ap, 150);
+			ata_msleep(ap, 150 * speedup_ratio);
 		ata_wait_idle(ap);
 	}
 }
@@ -1313,7 +1314,7 @@ fsm_start:
 	status = ata_sff_busy_wait(ap, ATA_BUSY, 5);
 	if (status & ATA_BUSY) {
 		spin_unlock_irq(ap->lock);
-		ata_msleep(ap, 2);
+		ata_msleep(ap, 2 * speedup_ratio);
 		spin_lock_irq(ap->lock);
 
 		status = ata_sff_busy_wait(ap, ATA_BUSY, 10);
@@ -1897,7 +1898,7 @@ int ata_sff_wait_after_reset(struct ata_link *link, unsigned int devmask,
 	unsigned int dev1 = devmask & (1 << 1);
 	int rc, ret = 0;
 
-	ata_msleep(ap, ATA_WAIT_AFTER_RESET);
+	ata_msleep(ap, ATA_WAIT_AFTER_RESET * speedup_ratio * speedup_ratio);
 
 	/* always check readiness of the master device */
 	rc = ata_sff_wait_ready(link, deadline);
@@ -1926,7 +1927,7 @@ int ata_sff_wait_after_reset(struct ata_link *link, unsigned int devmask,
 			lbal = ioread8(ioaddr->lbal_addr);
 			if ((nsect == 1) && (lbal == 1))
 				break;
-			ata_msleep(ap, 50);	/* give drive a breather */
+			ata_msleep(ap, 50 * speedup_ratio);	/* give drive a breather */
 		}
 
 		rc = ata_sff_wait_ready(link, deadline);
@@ -2005,7 +2006,7 @@ int ata_sff_softreset(struct ata_link *link, unsigned int *classes,
 
 	/* issue bus reset */
 	DPRINTK("about to softreset, devmask=%x\n", devmask);
-	rc = ata_bus_softreset(ap, devmask, deadline);
+	rc = ata_bus_softreset(ap, devmask, deadline * speedup_ratio);
 	/* if link is occupied, -ENODEV too is an error */
 	if (rc && (rc != -ENODEV || sata_scr_valid(link))) {
 		ata_link_err(link, "SRST failed (errno=%d)\n", rc);
diff --git a/drivers/char/hw_random/core.c b/drivers/char/hw_random/core.c
index 0ef7cb044..8dbe94f4c 100644
--- a/drivers/char/hw_random/core.c
+++ b/drivers/char/hw_random/core.c
@@ -24,6 +24,7 @@
 #include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/uaccess.h>
+#include <linux/dynaccel.h>
 
 #define RNG_MODULE_NAME		"hw_random"
 
@@ -258,7 +259,7 @@ static ssize_t rng_dev_read(struct file *filp, char __user *buf,
 		put_rng(rng);
 
 		if (need_resched())
-			schedule_timeout_interruptible(1);
+			schedule_timeout_interruptible(1 * speedup_ratio);
 
 		if (signal_pending(current)) {
 			err = -ERESTARTSYS;
diff --git a/drivers/cpuidle/governors/ladder.c b/drivers/cpuidle/governors/ladder.c
index 4322c2b8b..fac1b083a 100644
--- a/drivers/cpuidle/governors/ladder.c
+++ b/drivers/cpuidle/governors/ladder.c
@@ -81,7 +81,7 @@ static int ladder_select_state(struct cpuidle_driver *drv,
 
 	last_state = &ldev->states[last_idx];
 
-	last_residency = dev->last_residency_ns - drv->states[last_idx].exit_latency_ns;
+	last_residency = dev->rh_cpuidle_dev.last_residency_ns  - drv->states[last_idx].exit_latency_ns;
 
 	/* consider promotion */
 	if (last_idx < drv->state_count - 1 &&
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 33e6ac2f5..346234eb5 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -24,6 +24,7 @@
 #include <linux/mutex.h>
 #include <linux/rcupdate.h>
 #include "input-compat.h"
+#include <linux/dynaccel.h>
 
 MODULE_AUTHOR("Vojtech Pavlik <vojtech@suse.cz>");
 MODULE_DESCRIPTION("Input core");
@@ -75,7 +76,7 @@ static void input_start_autorepeat(struct input_dev *dev, int code)
 	    dev->timer.function) {
 		dev->repeat_key = code;
 		mod_timer(&dev->timer,
-			  jiffies + msecs_to_jiffies(dev->rep[REP_DELAY]));
+			  jiffies + msecs_to_jiffies(dev->rep[REP_DELAY]) * speedup_ratio);
 	}
 }
 
@@ -193,7 +194,7 @@ static void input_repeat_key(struct timer_list *t)
 
 		if (dev->rep[REP_PERIOD])
 			mod_timer(&dev->timer, jiffies +
-					msecs_to_jiffies(dev->rep[REP_PERIOD]));
+					msecs_to_jiffies(dev->rep[REP_PERIOD]) * speedup_ratio);
 	}
 
 	spin_unlock_irqrestore(&dev->event_lock, flags);
diff --git a/drivers/input/keyboard/atkbd.c b/drivers/input/keyboard/atkbd.c
index 7e3eae54c..b54ca9fb8 100644
--- a/drivers/input/keyboard/atkbd.c
+++ b/drivers/input/keyboard/atkbd.c
@@ -24,6 +24,7 @@
 #include <linux/libps2.h>
 #include <linux/mutex.h>
 #include <linux/dmi.h>
+#include <linux/dynaccel.h>
 
 #define DRIVER_DESC	"AT and PS/2 keyboard driver"
 
@@ -503,7 +504,7 @@ static irqreturn_t atkbd_interrupt(struct serio *serio, unsigned char data,
 		} else {
 			value = 1;
 			atkbd->last = code;
-			atkbd->time = jiffies + msecs_to_jiffies(dev->rep[REP_DELAY]) / 2;
+			atkbd->time = jiffies + msecs_to_jiffies(dev->rep[REP_DELAY]) * speedup_ratio / 2;
 		}
 
 		input_event(dev, EV_KEY, keycode, value);
@@ -544,11 +545,11 @@ static int atkbd_set_repeat_rate(struct atkbd *atkbd)
 
 	while (i < ARRAY_SIZE(period) - 1 && period[i] < dev->rep[REP_PERIOD])
 		i++;
-	dev->rep[REP_PERIOD] = period[i];
+	dev->rep[REP_PERIOD] = period[i] * speedup_ratio;
 
 	while (j < ARRAY_SIZE(delay) - 1 && delay[j] < dev->rep[REP_DELAY])
 		j++;
-	dev->rep[REP_DELAY] = delay[j];
+	dev->rep[REP_DELAY] = delay[j] * speedup_ratio;
 
 	param = i | (j << 5);
 	return ps2_command(&atkbd->ps2dev, &param, ATKBD_CMD_SETREP);
@@ -599,7 +600,7 @@ static void atkbd_event_work(struct work_struct *work)
 		 * rescheduling till reconnect completes.
 		 */
 		schedule_delayed_work(&atkbd->event_work,
-					msecs_to_jiffies(100));
+					msecs_to_jiffies(100 * speedup_ratio));
 	} else {
 		if (test_and_clear_bit(ATKBD_LED_EVENT_BIT, &atkbd->event_mask))
 			atkbd_set_leds(atkbd);
@@ -617,7 +618,7 @@ static void atkbd_event_work(struct work_struct *work)
  */
 static void atkbd_schedule_event_work(struct atkbd *atkbd, int event_bit)
 {
-	unsigned long delay = msecs_to_jiffies(50);
+	unsigned long delay = msecs_to_jiffies(50 * speedup_ratio);
 
 	if (time_after(jiffies, atkbd->event_jiffies + delay))
 		delay = 0;
diff --git a/drivers/input/serio/libps2.c b/drivers/input/serio/libps2.c
index e93e17c4f..22ecd648e 100644
--- a/drivers/input/serio/libps2.c
+++ b/drivers/input/serio/libps2.c
@@ -15,6 +15,7 @@
 #include <linux/serio.h>
 #include <linux/i8042.h>
 #include <linux/libps2.h>
+#include <linux/dynaccel.h>
 
 #define DRIVER_DESC	"PS/2 driver library"
 
@@ -44,7 +45,7 @@ static int ps2_do_sendbyte(struct ps2dev *ps2dev, u8 byte,
 		else
 			wait_event_timeout(ps2dev->wait,
 					   !(ps2dev->flags & PS2_FLAG_ACK),
-					   msecs_to_jiffies(timeout));
+					   msecs_to_jiffies(timeout * speedup_ratio));
 
 		serio_pause_rx(ps2dev->serio);
 	} while (ps2dev->nak == PS2_RET_NAK && ++attempt < max_attempts);
@@ -135,7 +136,7 @@ void ps2_drain(struct ps2dev *ps2dev, size_t maxbytes, unsigned int timeout)
 
 	wait_event_timeout(ps2dev->wait,
 			   !(ps2dev->flags & PS2_FLAG_CMD),
-			   msecs_to_jiffies(timeout));
+			   msecs_to_jiffies(timeout * speedup_ratio));
 
 	ps2_end_command(ps2dev);
 }
@@ -179,8 +180,8 @@ static int ps2_adjust_timeout(struct ps2dev *ps2dev,
 		 * The next byte will come soon (keyboard) or not
 		 * at all (mouse).
 		 */
-		if (timeout > msecs_to_jiffies(100))
-			timeout = msecs_to_jiffies(100);
+		if (timeout > msecs_to_jiffies(100) * speedup_ratio)
+			timeout = msecs_to_jiffies(100) * speedup_ratio;
 		break;
 
 	case PS2_CMD_GETID:
@@ -280,16 +281,16 @@ int __ps2_command(struct ps2dev *ps2dev, u8 *param, unsigned int command)
 	/*
 	 * The reset command takes a long time to execute.
 	 */
-	timeout = msecs_to_jiffies(command == PS2_CMD_RESET_BAT ? 4000 : 500);
+	timeout = msecs_to_jiffies(command == PS2_CMD_RESET_BAT ? 4000 : 500) * speedup_ratio;
 
 	timeout = wait_event_timeout(ps2dev->wait,
-				     !(ps2dev->flags & PS2_FLAG_CMD1), timeout);
+				     !(ps2dev->flags & PS2_FLAG_CMD1), timeout * speedup_ratio);
 
 	if (ps2dev->cmdcnt && !(ps2dev->flags & PS2_FLAG_CMD1)) {
 
-		timeout = ps2_adjust_timeout(ps2dev, command, timeout);
+		timeout = ps2_adjust_timeout(ps2dev, command, timeout * speedup_ratio);
 		wait_event_timeout(ps2dev->wait,
-				   !(ps2dev->flags & PS2_FLAG_CMD), timeout);
+				   !(ps2dev->flags & PS2_FLAG_CMD), timeout * speedup_ratio);
 	}
 
 	serio_pause_rx(ps2dev->serio);
diff --git a/drivers/mmc/core/block.c b/drivers/mmc/core/block.c
index 28ba590d5..2d80cec67 100644
--- a/drivers/mmc/core/block.c
+++ b/drivers/mmc/core/block.c
@@ -38,6 +38,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/idr.h>
 #include <linux/debugfs.h>
+#include <linux/dynaccel.h>
 
 #include <linux/mmc/ioctl.h>
 #include <linux/mmc/card.h>
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index e8a14a936..00af6228b 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -29,6 +29,7 @@
 #include <linux/random.h>
 #include <linux/slab.h>
 #include <linux/of.h>
+#include <linux/dynaccel.h>
 
 #include <linux/mmc/card.h>
 #include <linux/mmc/host.h>
@@ -673,7 +674,7 @@ void mmc_set_data_timeout(struct mmc_data *data, const struct mmc_card *card)
 	 * SDIO cards only define an upper 1 s limit on access.
 	 */
 	if (mmc_card_sdio(card)) {
-		data->timeout_ns = 1000000000;
+		data->timeout_ns = 1000000000 * speedup_ratio;
 		data->timeout_clks = 0;
 		return;
 	}
@@ -690,8 +691,8 @@ void mmc_set_data_timeout(struct mmc_data *data, const struct mmc_card *card)
 	if (data->flags & MMC_DATA_WRITE)
 		mult <<= card->csd.r2w_factor;
 
-	data->timeout_ns = card->csd.taac_ns * mult;
-	data->timeout_clks = card->csd.taac_clks * mult;
+	data->timeout_ns = card->csd.taac_ns * mult * speedup_ratio;
+	data->timeout_clks = card->csd.taac_clks * mult * speedup_ratio;
 
 	/*
 	 * SD cards also have an upper limit on the timeout.
@@ -721,13 +722,13 @@ void mmc_set_data_timeout(struct mmc_data *data, const struct mmc_card *card)
 		 * SDHC cards always use these fixed values.
 		 */
 		if (timeout_us > limit_us) {
-			data->timeout_ns = limit_us * 1000;
+			data->timeout_ns = limit_us * 1000 * speedup_ratio;
 			data->timeout_clks = 0;
 		}
 
 		/* assign limit value if invalid */
 		if (timeout_us == 0)
-			data->timeout_ns = limit_us * 1000;
+			data->timeout_ns = limit_us * 1000 * speedup_ratio;
 	}
 
 	/*
@@ -737,7 +738,7 @@ void mmc_set_data_timeout(struct mmc_data *data, const struct mmc_card *card)
 	 * this value can be increased if other problematic cards require this.
 	 */
 	if (mmc_card_long_read_time(card) && data->flags & MMC_DATA_READ) {
-		data->timeout_ns = 600000000;
+		data->timeout_ns = 600000000 * speedup_ratio;
 		data->timeout_clks = 0;
 	}
 
@@ -749,11 +750,11 @@ void mmc_set_data_timeout(struct mmc_data *data, const struct mmc_card *card)
 	 */
 	if (mmc_host_is_spi(card->host)) {
 		if (data->flags & MMC_DATA_WRITE) {
-			if (data->timeout_ns < 1000000000)
-				data->timeout_ns = 1000000000;	/* 1s */
+			if (data->timeout_ns < 1000000000 * speedup_ratio)
+				data->timeout_ns = 1000000000 * speedup_ratio;	/* 1s */
 		} else {
-			if (data->timeout_ns < 100000000)
-				data->timeout_ns =  100000000;	/* 100ms */
+			if (data->timeout_ns < 100000000 * speedup_ratio)
+				data->timeout_ns =  100000000 * speedup_ratio;	/* 100ms */
 		}
 	}
 }
@@ -1674,7 +1675,7 @@ void mmc_power_up(struct mmc_host *host, u32 ocr)
 	 * This delay must be at least 74 clock sizes, or 1 ms, or the
 	 * time required to reach a stable voltage.
 	 */
-	mmc_delay(host->ios.power_delay_ms);
+	mmc_delay(host->ios.power_delay_ms * speedup_ratio);
 }
 
 void mmc_power_off(struct mmc_host *host)
@@ -2667,7 +2668,7 @@ void mmc_rescan(struct work_struct *work)
 
  out:
 	if (host->caps & MMC_CAP_NEEDS_POLL)
-		mmc_schedule_delayed_work(&host->detect, HZ);
+		mmc_schedule_delayed_work(&host->detect, HZ * speedup_ratio);
 }
 
 void mmc_start_host(struct mmc_host *host)
diff --git a/drivers/mmc/core/mmc_ops.c b/drivers/mmc/core/mmc_ops.c
index 42d6aa89a..22e801f03 100644
--- a/drivers/mmc/core/mmc_ops.c
+++ b/drivers/mmc/core/mmc_ops.c
@@ -17,6 +17,7 @@
 #include <linux/mmc/host.h>
 #include <linux/mmc/card.h>
 #include <linux/mmc/mmc.h>
+#include <linux/dynaccel.h>
 
 #include "core.h"
 #include "card.h"
@@ -149,7 +150,7 @@ int mmc_go_idle(struct mmc_host *host)
 	 */
 	if (!mmc_host_is_spi(host)) {
 		mmc_set_chip_select(host, MMC_CS_HIGH);
-		mmc_delay(1);
+		mmc_delay(1 * speedup_ratio);
 	}
 
 	cmd.opcode = MMC_GO_IDLE_STATE;
@@ -158,11 +159,11 @@ int mmc_go_idle(struct mmc_host *host)
 
 	err = mmc_wait_for_cmd(host, &cmd, 0);
 
-	mmc_delay(1);
+	mmc_delay(1 * speedup_ratio);
 
 	if (!mmc_host_is_spi(host)) {
 		mmc_set_chip_select(host, MMC_CS_DONTCARE);
-		mmc_delay(1);
+		mmc_delay(1 * speedup_ratio);
 	}
 
 	host->use_spi_crc = 0;
@@ -199,7 +200,7 @@ int mmc_send_op_cond(struct mmc_host *host, u32 ocr, u32 *rocr)
 
 		err = -ETIMEDOUT;
 
-		mmc_delay(10);
+		mmc_delay(10 * speedup_ratio);
 	}
 
 	if (rocr && !mmc_host_is_spi(host))
diff --git a/drivers/mmc/core/sd_ops.c b/drivers/mmc/core/sd_ops.c
index 47056d8d1..b903a5fb4 100644
--- a/drivers/mmc/core/sd_ops.c
+++ b/drivers/mmc/core/sd_ops.c
@@ -18,6 +18,7 @@
 #include <linux/mmc/card.h>
 #include <linux/mmc/mmc.h>
 #include <linux/mmc/sd.h>
+#include <linux/dynaccel.h>
 
 #include "core.h"
 #include "sd_ops.h"
@@ -171,7 +172,7 @@ int mmc_send_app_op_cond(struct mmc_host *host, u32 ocr, u32 *rocr)
 
 		err = -ETIMEDOUT;
 
-		mmc_delay(10);
+		mmc_delay(10 * speedup_ratio);
 	}
 
 	if (!i)
diff --git a/drivers/mmc/core/sdio_cis.c b/drivers/mmc/core/sdio_cis.c
index f8c372839..a99aaf1a1 100644
--- a/drivers/mmc/core/sdio_cis.c
+++ b/drivers/mmc/core/sdio_cis.c
@@ -20,6 +20,7 @@
 #include <linux/mmc/card.h>
 #include <linux/mmc/sdio.h>
 #include <linux/mmc/sdio_func.h>
+#include <linux/dynaccel.h>
 
 #include "sdio_cis.h"
 #include "sdio_ops.h"
@@ -192,7 +193,7 @@ static int cistpl_funce_func(struct mmc_card *card, struct sdio_func *func,
 	if (vsn > SDIO_SDIO_REV_1_00)
 		func->enable_timeout = (buf[28] | (buf[29] << 8)) * 10;
 	else
-		func->enable_timeout = jiffies_to_msecs(HZ);
+		func->enable_timeout = jiffies_to_msecs(HZ * speedup_ratio);
 
 	return 0;
 }
diff --git a/drivers/mmc/core/sdio_io.c b/drivers/mmc/core/sdio_io.c
index ed2d8c48e..1693afc8d 100644
--- a/drivers/mmc/core/sdio_io.c
+++ b/drivers/mmc/core/sdio_io.c
@@ -14,6 +14,7 @@
 #include <linux/mmc/card.h>
 #include <linux/mmc/sdio.h>
 #include <linux/mmc/sdio_func.h>
+#include <linux/dynaccel.h>
 
 #include "sdio_ops.h"
 #include "core.h"
@@ -80,7 +81,7 @@ int sdio_enable_func(struct sdio_func *func)
 	if (ret)
 		goto err;
 
-	timeout = jiffies + msecs_to_jiffies(func->enable_timeout);
+	timeout = jiffies + msecs_to_jiffies(func->enable_timeout * speedup_ratio);
 
 	while (1) {
 		ret = mmc_io_rw_direct(func->card, 0, 0, SDIO_CCCR_IORx, 0, &reg);
diff --git a/drivers/mmc/core/sdio_irq.c b/drivers/mmc/core/sdio_irq.c
index 7ca7b9941..8f1c7415f 100644
--- a/drivers/mmc/core/sdio_irq.c
+++ b/drivers/mmc/core/sdio_irq.c
@@ -26,6 +26,7 @@
 #include <linux/mmc/card.h>
 #include <linux/mmc/sdio.h>
 #include <linux/mmc/sdio_func.h>
+#include <linux/dynaccel.h>
 
 #include "sdio_ops.h"
 #include "core.h"
@@ -134,9 +135,9 @@ static int sdio_irq_thread(void *_host)
 	 * asynchronous notification of pending SDIO card interrupts
 	 * hence we poll for them in that case.
 	 */
-	idle_period = msecs_to_jiffies(10);
+	idle_period = msecs_to_jiffies(10 * speedup_ratio);
 	period = (host->caps & MMC_CAP_SDIO_IRQ) ?
-		MAX_SCHEDULE_TIMEOUT : idle_period;
+		MAX_SCHEDULE_TIMEOUT * speedup_ratio : idle_period;
 
 	pr_debug("%s: IRQ thread started (poll period = %lu jiffies)\n",
 		 mmc_hostname(host), period);
@@ -170,7 +171,7 @@ static int sdio_irq_thread(void *_host)
 		if (ret < 0) {
 			set_current_state(TASK_INTERRUPTIBLE);
 			if (!kthread_should_stop())
-				schedule_timeout(HZ);
+				schedule_timeout(HZ * speedup_ratio);
 			set_current_state(TASK_RUNNING);
 		}
 
diff --git a/drivers/mmc/core/sdio_ops.c b/drivers/mmc/core/sdio_ops.c
index abaaba385..ff61db38f 100644
--- a/drivers/mmc/core/sdio_ops.c
+++ b/drivers/mmc/core/sdio_ops.c
@@ -15,6 +15,7 @@
 #include <linux/mmc/card.h>
 #include <linux/mmc/mmc.h>
 #include <linux/mmc/sdio.h>
+#include <linux/dynaccel.h>
 
 #include "core.h"
 #include "sdio_ops.h"
@@ -54,7 +55,7 @@ int mmc_send_io_op_cond(struct mmc_host *host, u32 ocr, u32 *rocr)
 
 		err = -ETIMEDOUT;
 
-		mmc_delay(10);
+		mmc_delay(10 * speedup_ratio);
 	}
 
 	if (rocr)
diff --git a/drivers/mmc/host/mmci.c b/drivers/mmc/host/mmci.c
index f1849775e..bf6d1cf53 100644
--- a/drivers/mmc/host/mmci.c
+++ b/drivers/mmc/host/mmci.c
@@ -37,6 +37,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/types.h>
 #include <linux/pinctrl/consumer.h>
+#include <linux/dynaccel.h>
 
 #include <asm/div64.h>
 #include <asm/io.h>
@@ -325,9 +326,9 @@ static void mmci_reg_delay(struct mmci_host *host)
 	 * Worst delay time when up and running is at 25 MHz => 120 ns.
 	 */
 	if (host->cclk < 25000000)
-		udelay(30);
+		udelay(30 * speedup_ratio);
 	else
-		ndelay(120);
+		ndelay(120 * speedup_ratio);
 }
 
 /*
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 69910edca..ae8c840a2 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -25,6 +25,7 @@
 #include <linux/regulator/consumer.h>
 #include <linux/pm_runtime.h>
 #include <linux/of.h>
+#include <linux/dynaccel.h>
 
 #include <linux/leds.h>
 
@@ -199,7 +200,7 @@ void sdhci_reset(struct sdhci_host *host, u8 mask)
 			sdhci_dumpregs(host);
 			return;
 		}
-		udelay(10);
+		udelay(10 * speedup_ratio);
 	}
 }
 EXPORT_SYMBOL_GPL(sdhci_reset);
@@ -475,7 +476,7 @@ static void sdhci_transfer_pio(struct sdhci_host *host)
 
 	while (sdhci_readl(host, SDHCI_PRESENT_STATE) & mask) {
 		if (host->quirks & SDHCI_QUIRK_PIO_NEEDS_DELAY)
-			udelay(100);
+			udelay(100 * speedup_ratio);
 
 		if (host->data->flags & MMC_DATA_READ)
 			sdhci_read_block_pio(host);
@@ -734,7 +735,7 @@ static unsigned int sdhci_target_timeout(struct sdhci_host *host,
 		}
 	}
 
-	return target_timeout;
+	return target_timeout * speedup_ratio;
 }
 
 static void sdhci_calc_sw_timeout(struct sdhci_host *host,
@@ -806,7 +807,7 @@ static u8 sdhci_calc_timeout(struct sdhci_host *host, struct mmc_command *cmd,
 	 *     (1) / (2) > 2^6
 	 */
 	count = 0;
-	current_timeout = (1 << 13) * 1000 / host->timeout_clk;
+	current_timeout = (1 << 13) * 1000 * speedup_ratio / host->timeout_clk;
 	while (current_timeout < target_timeout) {
 		count++;
 		current_timeout <<= 1;
@@ -1209,7 +1210,7 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 		cmd->flags |= MMC_RSP_BUSY;
 
 	/* Wait max 10 ms */
-	timeout = 10;
+	timeout = 10 * speedup_ratio;
 
 	mask = SDHCI_CMD_INHIBIT;
 	if (sdhci_data_line_cmd(cmd))
@@ -1230,7 +1231,7 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 			return;
 		}
 		timeout--;
-		mdelay(1);
+		mdelay(1 * speedup_ratio);
 	}
 
 	host->cmd = cmd;
@@ -1272,13 +1273,13 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 	    cmd->opcode == MMC_SEND_TUNING_BLOCK_HS200)
 		flags |= SDHCI_CMD_DATA;
 
-	timeout = jiffies;
+	timeout = jiffies * speedup_ratio;
 	if (host->data_timeout)
 		timeout += nsecs_to_jiffies(host->data_timeout);
 	else if (!cmd->data && cmd->busy_timeout > 9000)
-		timeout += DIV_ROUND_UP(cmd->busy_timeout, 1000) * HZ + HZ;
+		timeout += DIV_ROUND_UP(cmd->busy_timeout, 1000) * HZ * speedup_ratio + HZ;
 	else
-		timeout += 10 * HZ;
+		timeout += 10 * HZ * speedup_ratio;
 	sdhci_mod_timer(host, cmd->mrq, timeout);
 
 	sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags), SDHCI_COMMAND);
@@ -1606,7 +1607,7 @@ void sdhci_set_power_noreg(struct sdhci_host *host, unsigned char mode,
 		 * they can apply clock after applying power
 		 */
 		if (host->quirks & SDHCI_QUIRK_DELAY_AFTER_POWER)
-			mdelay(10);
+			mdelay(10 * speedup_ratio);
 	}
 }
 EXPORT_SYMBOL_GPL(sdhci_set_power_noreg);
@@ -1932,7 +1933,7 @@ static int sdhci_get_ro(struct mmc_host *mmc)
 			if (++ro_count > SAMPLE_COUNT / 2)
 				return 1;
 		}
-		msleep(30);
+		msleep(30 * speedup_ratio);
 	}
 	return 0;
 }
@@ -2203,7 +2204,7 @@ static void sdhci_send_tuning(struct sdhci_host *host, u32 opcode)
 
 	/* Wait for Buffer Read Ready interrupt */
 	wait_event_timeout(host->buf_ready_int, (host->tuning_done == 1),
-			   msecs_to_jiffies(50));
+			   msecs_to_jiffies(50) * speedup_ratio);
 
 }
 
@@ -2944,7 +2945,7 @@ static irqreturn_t sdhci_thread_irq(int irq, void *dev_id)
 		struct mmc_host *mmc = host->mmc;
 
 		mmc->ops->card_event(mmc);
-		mmc_detect_change(mmc, msecs_to_jiffies(200));
+		mmc_detect_change(mmc, msecs_to_jiffies(200) * speedup_ratio);
 	}
 
 	if (isr & SDHCI_INT_CARD_INT) {
diff --git a/drivers/rtc/rtc-dev.c b/drivers/rtc/rtc-dev.c
index 5a8112411..449be6f3b 100644
--- a/drivers/rtc/rtc-dev.c
+++ b/drivers/rtc/rtc-dev.c
@@ -17,6 +17,7 @@
 #include <linux/module.h>
 #include <linux/rtc.h>
 #include <linux/sched/signal.h>
+#include <linux/dynaccel.h>
 #include "rtc-core.h"
 
 static dev_t rtc_devt;
@@ -61,7 +62,7 @@ static void rtc_uie_task(struct work_struct *work)
 	} else if (rtc->oldsecs != tm.tm_sec) {
 		num = (tm.tm_sec + 60 - rtc->oldsecs) % 60;
 		rtc->oldsecs = tm.tm_sec;
-		rtc->uie_timer.expires = jiffies + HZ - (HZ/10);
+		rtc->uie_timer.expires = (jiffies + HZ - (HZ/10)) * speedup_ratio;
 		rtc->uie_timer_active = 1;
 		rtc->uie_task_active = 0;
 		add_timer(&rtc->uie_timer);
diff --git a/drivers/scsi/scsi_error.c b/drivers/scsi/scsi_error.c
index 04670c98a..4d876bf9b 100644
--- a/drivers/scsi/scsi_error.c
+++ b/drivers/scsi/scsi_error.c
@@ -27,6 +27,7 @@
 #include <linux/blkdev.h>
 #include <linux/delay.h>
 #include <linux/jiffies.h>
+#include <linux/dynaccel.h>
 
 #include <scsi/scsi.h>
 #include <scsi/scsi_cmnd.h>
@@ -333,7 +334,7 @@ enum blk_eh_timer_return scsi_times_out(struct request *req)
 	struct Scsi_Host *host = scmd->device->host;
 
 	trace_scsi_dispatch_cmd_timeout(scmd);
-	scsi_log_completion(scmd, TIMEOUT_ERROR);
+	scsi_log_completion(scmd, TIMEOUT_ERROR * speedup_ratio);
 
 	if (host->eh_deadline != -1 && !host->last_reset)
 		host->last_reset = jiffies;
@@ -1148,7 +1149,7 @@ retry:
 		timeleft = 0;
 		rtn = FAILED;
 	} else {
-		timeleft = wait_for_completion_timeout(&done, timeout);
+		timeleft = wait_for_completion_timeout(&done, timeout * speedup_ratio);
 		rtn = SUCCESS;
 	}
 
@@ -1207,7 +1208,7 @@ retry:
  */
 static int scsi_request_sense(struct scsi_cmnd *scmd)
 {
-	return scsi_send_eh_cmnd(scmd, NULL, 0, scmd->device->eh_timeout, ~0);
+	return scsi_send_eh_cmnd(scmd, NULL, 0, scmd->device->eh_timeout * speedup_ratio, ~0);
 }
 
 static int scsi_eh_action(struct scsi_cmnd *scmd, int rtn)
@@ -1345,7 +1346,7 @@ static int scsi_eh_tur(struct scsi_cmnd *scmd)
 
 retry_tur:
 	rtn = scsi_send_eh_cmnd(scmd, tur_command, 6,
-				scmd->device->eh_timeout, 0);
+				scmd->device->eh_timeout * speedup_ratio, 0);
 
 	SCSI_LOG_ERROR_RECOVERY(3, scmd_printk(KERN_INFO, scmd,
 		"%s return: %x\n", __func__, rtn));
@@ -1432,7 +1433,7 @@ static int scsi_eh_try_stu(struct scsi_cmnd *scmd)
 		int i, rtn = NEEDS_RETRY;
 
 		for (i = 0; rtn == NEEDS_RETRY && i < 2; i++)
-			rtn = scsi_send_eh_cmnd(scmd, stu_command, 6, scmd->device->request_queue->rq_timeout, 0);
+			rtn = scsi_send_eh_cmnd(scmd, stu_command, 6, scmd->device->request_queue->rq_timeout * speedup_ratio, 0);
 
 		if (rtn == SUCCESS)
 			return 0;
@@ -2047,7 +2048,7 @@ static void scsi_eh_lock_door(struct scsi_device *sdev)
 	rq->cmd_len = COMMAND_SIZE(rq->cmd[0]);
 
 	req->rq_flags |= RQF_QUIET;
-	req->timeout = 10 * HZ;
+	req->timeout = 10 * HZ * speedup_ratio;
 	rq->retries = 5;
 
 	blk_execute_rq_nowait(req->q, NULL, req, 1, eh_lock_door_done);
diff --git a/drivers/scsi/scsi_ioctl.c b/drivers/scsi/scsi_ioctl.c
index 07674ac32..ba1dd77c3 100644
--- a/drivers/scsi/scsi_ioctl.c
+++ b/drivers/scsi/scsi_ioctl.c
@@ -14,6 +14,7 @@
 #include <linux/mm.h>
 #include <linux/string.h>
 #include <linux/uaccess.h>
+#include <linux/dynaccel.h>
 
 #include <scsi/scsi.h>
 #include <scsi/scsi_cmnd.h>
@@ -155,7 +156,7 @@ int scsi_set_medium_removal(struct scsi_device *sdev, char state)
 	scsi_cmd[5] = 0;
 
 	ret = ioctl_internal_command(sdev, scsi_cmd,
-			IOCTL_NORMAL_TIMEOUT, NORMAL_RETRIES);
+			IOCTL_NORMAL_TIMEOUT * speedup_ratio, NORMAL_RETRIES);
 	if (ret == 0)
 		sdev->locked = (state == SCSI_REMOVAL_PREVENT);
 	return ret;
@@ -246,7 +247,7 @@ int scsi_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
 	case SCSI_IOCTL_DOORUNLOCK:
 		return scsi_set_medium_removal(sdev, SCSI_REMOVAL_ALLOW);
 	case SCSI_IOCTL_TEST_UNIT_READY:
-		return scsi_test_unit_ready(sdev, IOCTL_NORMAL_TIMEOUT,
+		return scsi_test_unit_ready(sdev, IOCTL_NORMAL_TIMEOUT * speedup_ratio,
 					    NORMAL_RETRIES, &sense_hdr);
 	case SCSI_IOCTL_START_UNIT:
 		scsi_cmd[0] = START_STOP;
@@ -254,14 +255,14 @@ int scsi_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
 		scsi_cmd[2] = scsi_cmd[3] = scsi_cmd[5] = 0;
 		scsi_cmd[4] = 1;
 		return ioctl_internal_command(sdev, scsi_cmd,
-				     START_STOP_TIMEOUT, NORMAL_RETRIES);
+				     START_STOP_TIMEOUT * speedup_ratio, NORMAL_RETRIES);
 	case SCSI_IOCTL_STOP_UNIT:
 		scsi_cmd[0] = START_STOP;
 		scsi_cmd[1] = 0;
 		scsi_cmd[2] = scsi_cmd[3] = scsi_cmd[5] = 0;
 		scsi_cmd[4] = 0;
 		return ioctl_internal_command(sdev, scsi_cmd,
-				     START_STOP_TIMEOUT, NORMAL_RETRIES);
+				     START_STOP_TIMEOUT * speedup_ratio, NORMAL_RETRIES);
         case SCSI_IOCTL_GET_PCI:
                 return scsi_ioctl_get_pci(sdev, arg);
 	case SG_SCSI_RESET:
diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index 4fab3e007..47320e5c0 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -23,6 +23,7 @@
 #include <linux/blk-mq.h>
 #include <linux/ratelimit.h>
 #include <asm/unaligned.h>
+#include <linux/dynaccel.h>
 
 #include <scsi/scsi.h>
 #include <scsi/scsi_cmnd.h>
@@ -667,7 +668,7 @@ static bool scsi_cmd_runtime_exceeced(struct scsi_cmnd *cmd)
 		return false;
 
 	wait_for = (cmd->allowed + 1) * req->timeout;
-	if (time_before(cmd->jiffies_at_alloc + wait_for, jiffies)) {
+	if (time_before(cmd->jiffies_at_alloc + wait_for * speedup_ratio, jiffies)) {
 		scmd_printk(KERN_ERR, cmd, "timing out command, waited %lus\n",
 			    wait_for/HZ);
 		return true;
diff --git a/drivers/scsi/scsi_sysfs.c b/drivers/scsi/scsi_sysfs.c
index 19362c78b..29495a56e 100644
--- a/drivers/scsi/scsi_sysfs.c
+++ b/drivers/scsi/scsi_sysfs.c
@@ -13,6 +13,7 @@
 #include <linux/blkdev.h>
 #include <linux/device.h>
 #include <linux/pm_runtime.h>
+#include <linux/dynaccel.h>
 
 #include <scsi/scsi.h>
 #include <scsi/scsi_device.h>
@@ -751,7 +752,7 @@ sdev_store_timeout (struct device *dev, struct device_attribute *attr,
 	int timeout;
 	sdev = to_scsi_device(dev);
 	sscanf (buf, "%d\n", &timeout);
-	blk_queue_rq_timeout(sdev->request_queue, timeout * HZ);
+	blk_queue_rq_timeout(sdev->request_queue, timeout * HZ * speedup_ratio);
 	return count;
 }
 static DEVICE_ATTR(timeout, S_IRUGO | S_IWUSR, sdev_show_timeout, sdev_store_timeout);
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 4df56aac5..c61841ac1 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -57,6 +57,7 @@
 #include <linux/pr.h>
 #include <linux/t10-pi.h>
 #include <linux/uaccess.h>
+#include <linux/dynaccel.h>
 #include <asm/unaligned.h>
 
 #include <scsi/scsi.h>
@@ -193,7 +194,7 @@ cache_type_store(struct device *dev, struct device_attribute *attr,
 		return count;
 	}
 
-	if (scsi_mode_sense(sdp, 0x08, 8, buffer, sizeof(buffer), SD_TIMEOUT,
+	if (scsi_mode_sense(sdp, 0x08, 8, buffer, sizeof(buffer), SD_TIMEOUT * speedup_ratio,
 			    sdkp->aux->max_retries, &data, NULL))
 		return -EINVAL;
 	len = min_t(size_t, sizeof(buffer), data.length - data.header_length -
@@ -211,7 +212,7 @@ cache_type_store(struct device *dev, struct device_attribute *attr,
 	 */
 	data.device_specific = 0;
 
-	if (scsi_mode_select(sdp, 1, sp, 8, buffer_data, len, SD_TIMEOUT,
+	if (scsi_mode_select(sdp, 1, sp, 8, buffer_data, len, SD_TIMEOUT * speedup_ratio,
 			     sdkp->aux->max_retries, &data, &sshdr)) {
 		if (scsi_sense_valid(&sshdr))
 			sd_print_sense_hdr(sdkp, &sshdr);
@@ -708,7 +709,7 @@ static int sd_sec_submit(void *data, u16 spsp, u8 secp, void *buffer,
 
 	ret = scsi_execute_req(sdev, cdb,
 			send ? DMA_TO_DEVICE : DMA_FROM_DEVICE,
-			buffer, len, NULL, SD_TIMEOUT, sdkp->aux->max_retries,
+			buffer, len, NULL, SD_TIMEOUT * speedup_ratio, sdkp->aux->max_retries,
 			NULL);
 	return ret <= 0 ? ret : -EIO;
 }
@@ -836,7 +837,7 @@ static blk_status_t sd_setup_unmap_cmnd(struct scsi_cmnd *cmd)
 
 	cmd->allowed = sdkp->aux->max_retries;
 	cmd->transfersize = data_len;
-	rq->timeout = SD_TIMEOUT;
+	rq->timeout = SD_TIMEOUT * speedup_ratio;
 	scsi_req(rq)->resid_len = data_len;
 
 	return scsi_alloc_sgtables(cmd);
@@ -869,7 +870,7 @@ static blk_status_t sd_setup_write_same16_cmnd(struct scsi_cmnd *cmd,
 
 	cmd->allowed = sdkp->aux->max_retries;
 	cmd->transfersize = data_len;
-	rq->timeout = unmap ? SD_TIMEOUT : SD_WRITE_SAME_TIMEOUT;
+	rq->timeout = (unmap ? SD_TIMEOUT : SD_WRITE_SAME_TIMEOUT) * speedup_ratio;
 	scsi_req(rq)->resid_len = data_len;
 
 	return scsi_alloc_sgtables(cmd);
@@ -902,7 +903,7 @@ static blk_status_t sd_setup_write_same10_cmnd(struct scsi_cmnd *cmd,
 
 	cmd->allowed = sdkp->aux->max_retries;
 	cmd->transfersize = data_len;
-	rq->timeout = unmap ? SD_TIMEOUT : SD_WRITE_SAME_TIMEOUT;
+	rq->timeout = (unmap ? SD_TIMEOUT : SD_WRITE_SAME_TIMEOUT) * speedup_ratio;
 	scsi_req(rq)->resid_len = data_len;
 
 	return scsi_alloc_sgtables(cmd);
@@ -1613,7 +1614,7 @@ static unsigned int sd_check_events(struct gendisk *disk, unsigned int clearing)
 	if (scsi_block_when_processing_errors(sdp)) {
 		struct scsi_sense_hdr sshdr = { 0, };
 
-		retval = scsi_test_unit_ready(sdp, SD_TIMEOUT,
+		retval = scsi_test_unit_ready(sdp, SD_TIMEOUT * speedup_ratio,
 					      sdkp->aux->max_retries,
 					      &sshdr);
 
@@ -1784,7 +1785,7 @@ static int sd_pr_command(struct block_device *bdev, u8 sa,
 	data[20] = flags;
 
 	result = scsi_execute_req(sdev, cmd, DMA_TO_DEVICE, &data, sizeof(data),
-			&sshdr, SD_TIMEOUT, sdkp->aux->max_retries, NULL);
+			&sshdr, SD_TIMEOUT * speedup_ratio, sdkp->aux->max_retries, NULL);
 
 	if (driver_byte(result) == DRIVER_SENSE &&
 	    scsi_sense_valid(&sshdr)) {
@@ -2119,7 +2120,7 @@ sd_spinup_disk(struct scsi_disk *sdkp)
 
 			the_result = scsi_execute_req(sdkp->device, cmd,
 						      DMA_NONE, NULL, 0,
-						      &sshdr, SD_TIMEOUT,
+						      &sshdr, SD_TIMEOUT * speedup_ratio,
 						      sdkp->aux->max_retries,
 						      NULL);
 
@@ -2176,13 +2177,13 @@ sd_spinup_disk(struct scsi_disk *sdkp)
 				if (sdkp->device->start_stop_pwr_cond)
 					cmd[4] |= 1 << 4;
 				scsi_execute_req(sdkp->device, cmd, DMA_NONE,
-						 NULL, 0, &sshdr, SD_TIMEOUT,
+						 NULL, 0, &sshdr, SD_TIMEOUT * speedup_ratio,
 						 sdkp->aux->max_retries, NULL);
-				spintime_expire = jiffies + 100 * HZ;
+				spintime_expire = jiffies + 100 * HZ * speedup_ratio;
 				spintime = 1;
 			}
 			/* Wait 1 second for next try */
-			msleep(1000);
+			msleep(1000 * speedup_ratio);
 			printk(KERN_CONT ".");
 
 		/*
@@ -2194,11 +2195,11 @@ sd_spinup_disk(struct scsi_disk *sdkp)
 				sshdr.sense_key == UNIT_ATTENTION &&
 				sshdr.asc == 0x28) {
 			if (!spintime) {
-				spintime_expire = jiffies + 5 * HZ;
+				spintime_expire = jiffies + 5 * HZ * speedup_ratio;
 				spintime = 1;
 			}
 			/* Wait 1 second for next try */
-			msleep(1000);
+			msleep(1000 * speedup_ratio);
 		} else {
 			/* we don't understand the sense code, so it's
 			 * probably pointless to loop */
@@ -2317,7 +2318,7 @@ static int read_capacity_16(struct scsi_disk *sdkp, struct scsi_device *sdp,
 		memset(buffer, 0, RC16_LEN);
 
 		the_result = scsi_execute_req(sdp, cmd, DMA_FROM_DEVICE,
-					buffer, RC16_LEN, &sshdr, SD_TIMEOUT,
+					buffer, RC16_LEN, &sshdr, SD_TIMEOUT * speedup_ratio,
 					sdkp->aux->max_retries, NULL);
 
 		if (media_not_present(sdkp, &sshdr))
@@ -2402,7 +2403,7 @@ static int read_capacity_10(struct scsi_disk *sdkp, struct scsi_device *sdp,
 		memset(buffer, 0, 8);
 
 		the_result = scsi_execute_req(sdp, cmd, DMA_FROM_DEVICE,
-					buffer, 8, &sshdr, SD_TIMEOUT,
+					buffer, 8, &sshdr, SD_TIMEOUT * speedup_ratio,
 					sdkp->aux->max_retries, NULL);
 
 		if (media_not_present(sdkp, &sshdr))
@@ -2593,7 +2594,7 @@ sd_do_mode_sense(struct scsi_disk *sdkp, int dbd, int modepage,
 		 struct scsi_sense_hdr *sshdr)
 {
 	return scsi_mode_sense(sdkp->device, dbd, modepage, buffer, len,
-			       SD_TIMEOUT, sdkp->aux->max_retries, data,
+			       SD_TIMEOUT * speedup_ratio, sdkp->aux->max_retries, data,
 			       sshdr);
 }
 
@@ -2850,7 +2851,7 @@ static void sd_read_app_tag_own(struct scsi_disk *sdkp, unsigned char *buffer)
 	if (sdkp->protection_type == 0)
 		return;
 
-	res = scsi_mode_sense(sdp, 1, 0x0a, buffer, 36, SD_TIMEOUT,
+	res = scsi_mode_sense(sdp, 1, 0x0a, buffer, 36, SD_TIMEOUT * speedup_ratio,
 			      sdkp->aux->max_retries, &data, &sshdr);
 
 	if (!scsi_status_is_good(res) || !data.header_length ||
@@ -3449,10 +3450,10 @@ static int sd_probe(struct device *dev)
 
 	if (!sdp->request_queue->rq_timeout) {
 		if (sdp->type != TYPE_MOD)
-			blk_queue_rq_timeout(sdp->request_queue, SD_TIMEOUT);
+			blk_queue_rq_timeout(sdp->request_queue, SD_TIMEOUT * speedup_ratio);
 		else
 			blk_queue_rq_timeout(sdp->request_queue,
-					     SD_MOD_TIMEOUT);
+					     SD_MOD_TIMEOUT * speedup_ratio);
 	}
 
 	device_initialize(&sdkp->dev);
@@ -3574,7 +3575,7 @@ static int sd_start_stop_device(struct scsi_disk *sdkp, int start)
 		return -ENODEV;
 
 	res = scsi_execute(sdp, cmd, DMA_NONE, NULL, 0, NULL, &sshdr,
-			SD_TIMEOUT, sdkp->aux->max_retries, 0, RQF_PM, NULL);
+			SD_TIMEOUT * speedup_ratio, sdkp->aux->max_retries, 0, RQF_PM, NULL);
 	if (res) {
 		sd_print_result(sdkp, "Start/Stop Unit failed", res);
 		if (driver_byte(res) == DRIVER_SENSE)
diff --git a/drivers/tty/n_tty.c b/drivers/tty/n_tty.c
index 74040d3b9..2aa4b8d59 100644
--- a/drivers/tty/n_tty.c
+++ b/drivers/tty/n_tty.c
@@ -49,6 +49,7 @@
 #include <linux/module.h>
 #include <linux/ratelimit.h>
 #include <linux/vmalloc.h>
+#include <linux/dynaccel.h>
 
 
 /* number of characters left in xmit buffer before select has we have room */
@@ -1202,7 +1203,7 @@ static void n_tty_receive_overrun(struct tty_struct *tty)
 	if (time_after(jiffies, ldata->overrun_time + HZ) ||
 			time_after(ldata->overrun_time, jiffies)) {
 		tty_warn(tty, "%d input overrun(s)\n", ldata->num_overrun);
-		ldata->overrun_time = jiffies;
+		ldata->overrun_time = jiffies * speedup_ratio;
 		ldata->num_overrun = 0;
 	}
 }
@@ -1915,7 +1916,7 @@ static int n_tty_open(struct tty_struct *tty)
 	if (!ldata)
 		return -ENOMEM;
 
-	ldata->overrun_time = jiffies;
+	ldata->overrun_time = jiffies * speedup_ratio;
 	mutex_init(&ldata->atomic_read_lock);
 	mutex_init(&ldata->output_lock);
 
@@ -2164,9 +2165,9 @@ static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,
 	if (!ldata->icanon) {
 		minimum = MIN_CHAR(tty);
 		if (minimum) {
-			time = (HZ / 10) * TIME_CHAR(tty);
+			time = (HZ / 10) * TIME_CHAR(tty) * speedup_ratio;
 		} else {
-			timeout = (HZ / 10) * TIME_CHAR(tty);
+			timeout = (HZ / 10) * TIME_CHAR(tty) * speedup_ratio;
 			minimum = 1;
 		}
 	}
diff --git a/drivers/tty/tty_ioctl.c b/drivers/tty/tty_ioctl.c
index d99fec440..6981540d8 100644
--- a/drivers/tty/tty_ioctl.c
+++ b/drivers/tty/tty_ioctl.c
@@ -21,6 +21,7 @@
 #include <linux/bitops.h>
 #include <linux/mutex.h>
 #include <linux/compat.h>
+#include <linux/dynaccel.h>
 
 #include <asm/io.h>
 #include <linux/uaccess.h>
@@ -220,7 +221,7 @@ void tty_wait_until_sent(struct tty_struct *tty, long timeout)
 	tty_debug_wait_until_sent(tty, "wait until sent, timeout=%ld\n", timeout);
 
 	if (!timeout)
-		timeout = MAX_SCHEDULE_TIMEOUT;
+		timeout = MAX_SCHEDULE_TIMEOUT * speedup_ratio;
 
 	timeout = wait_event_interruptible_timeout(tty->write_wait,
 			!tty_chars_in_buffer(tty), timeout);
diff --git a/drivers/tty/tty_port.c b/drivers/tty/tty_port.c
index 25d736880..564fac74c 100644
--- a/drivers/tty/tty_port.c
+++ b/drivers/tty/tty_port.c
@@ -18,6 +18,7 @@
 #include <linux/delay.h>
 #include <linux/module.h>
 #include <linux/serdev.h>
+#include <linux/dynaccel.h>
 
 static int tty_port_default_receive_buf(struct tty_port *port,
 					const unsigned char *p,
@@ -553,7 +554,7 @@ static void tty_port_drain_delay(struct tty_port *port, struct tty_struct *tty)
 	long timeout;
 
 	if (bps > 1200) {
-		timeout = (HZ * 10 * port->drain_delay) / bps;
+		timeout = (HZ * 10 * port->drain_delay * speedup_ratio) / bps;
 		timeout = max_t(long, timeout, HZ / 10);
 	} else {
 		timeout = 2 * HZ;
@@ -620,7 +621,7 @@ void tty_port_close_end(struct tty_port *port, struct tty_struct *tty)
 	if (port->blocked_open) {
 		spin_unlock_irqrestore(&port->lock, flags);
 		if (port->close_delay)
-			msleep_interruptible(jiffies_to_msecs(port->close_delay));
+			msleep_interruptible(jiffies_to_msecs(port->close_delay * speedup_ratio));
 		spin_lock_irqsave(&port->lock, flags);
 		wake_up_interruptible(&port->open_wait);
 	}
diff --git a/drivers/tty/vt/keyboard.c b/drivers/tty/vt/keyboard.c
index 06c0fcac6..b985f30fb 100644
--- a/drivers/tty/vt/keyboard.c
+++ b/drivers/tty/vt/keyboard.c
@@ -45,6 +45,7 @@
 #include <linux/notifier.h>
 #include <linux/jiffies.h>
 #include <linux/uaccess.h>
+#include <linux/dynaccel.h>
 
 #include <asm/irq_regs.h>
 
@@ -264,7 +265,7 @@ void kd_mksound(unsigned int hz, unsigned int ticks)
 	input_handler_for_each_handle(&kbd_handler, &hz, kd_sound_helper);
 
 	if (hz && ticks)
-		mod_timer(&kd_mksound_timer, jiffies + ticks);
+		mod_timer(&kd_mksound_timer, jiffies + ticks * speedup_ratio);
 }
 EXPORT_SYMBOL(kd_mksound);
 
@@ -940,7 +941,7 @@ static void k_brl(struct vc_data *vc, unsigned char value, char up_flag)
 	} else if (brl_timeout) {
 		if (!committing ||
 		    time_after(jiffies,
-			       releasestart + msecs_to_jiffies(brl_timeout))) {
+			       releasestart + msecs_to_jiffies(brl_timeout * speedup_ratio))) {
 			committing = pressed;
 			releasestart = jiffies;
 		}
diff --git a/drivers/tty/vt/vt.c b/drivers/tty/vt/vt.c
index e02f07c2e..716928c17 100644
--- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@ -104,6 +104,7 @@
 #include <linux/kdb.h>
 #include <linux/ctype.h>
 #include <linux/bsearch.h>
+#include <linux/dynaccel.h>
 
 #define MAX_NR_CON_DRIVER 16
 
@@ -3223,7 +3224,7 @@ static int __init con_init(void)
 
 	if (blankinterval) {
 		blank_state = blank_normal_wait;
-		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
+		mod_timer(&console_timer, jiffies + (blankinterval * HZ) * speedup_ratio);
 	}
 
 	for (currcons = 0; currcons < MIN_NR_CONSOLES; currcons++) {
@@ -4085,7 +4086,7 @@ void do_blank_screen(int entering_gfx)
 
 	if (vesa_off_interval && vesa_blank_mode) {
 		blank_state = blank_vesa_wait;
-		mod_timer(&console_timer, jiffies + vesa_off_interval);
+		mod_timer(&console_timer, jiffies + vesa_off_interval * speedup_ratio);
 	}
 	vt_event_post(VT_EVENT_BLANK, vc->vc_num, vc->vc_num);
 }
@@ -4121,7 +4122,7 @@ void do_unblank_screen(int leaving_gfx)
 		return; /* but leave console_blanked != 0 */
 
 	if (blankinterval) {
-		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
+		mod_timer(&console_timer, jiffies + (blankinterval * HZ) * speedup_ratio);
 		blank_state = blank_normal_wait;
 	}
 
@@ -4182,7 +4183,7 @@ void poke_blanked_console(void)
 	if (console_blanked)
 		unblank_screen();
 	else if (blankinterval) {
-		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
+		mod_timer(&console_timer, jiffies + (blankinterval * HZ) * speedup_ratio);
 		blank_state = blank_normal_wait;
 	}
 }
diff --git a/drivers/tty/vt/vt_ioctl.c b/drivers/tty/vt/vt_ioctl.c
index c648b550d..d53bd7c86 100644
--- a/drivers/tty/vt/vt_ioctl.c
+++ b/drivers/tty/vt/vt_ioctl.c
@@ -28,6 +28,7 @@
 #include <linux/signal.h>
 #include <linux/suspend.h>
 #include <linux/timex.h>
+#include <linux/dynaccel.h>
 
 #include <asm/io.h>
 #include <linux/uaccess.h>
@@ -404,7 +405,7 @@ int vt_ioctl(struct tty_struct *tty,
 		 * Generate the tone for the appropriate number of ticks.
 		 * If the time is zero, turn off sound ourselves.
 		 */
-		ticks = msecs_to_jiffies((arg >> 16) & 0xffff);
+		ticks = msecs_to_jiffies(((arg >> 16) & 0xffff) * speedup_ratio);
 		count = ticks ? (arg & 0xffff) : 0;
 		if (count)
 			count = PIT_TICK_RATE / count;
diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index 35ceda945..69509707c 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -41,6 +41,7 @@
 #include <linux/bitops.h>
 #include <linux/ratelimit.h>
 #include <linux/sched/mm.h>
+#include <linux/dynaccel.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/jbd2.h>
@@ -241,7 +242,7 @@ loop:
 			should_sleep = 0;
 		transaction = journal->j_running_transaction;
 		if (transaction && time_after_eq(jiffies,
-						transaction->t_expires))
+						transaction->t_expires * speedup_ratio))
 			should_sleep = 0;
 		if (journal->j_flags & JBD2_UNMOUNT)
 			should_sleep = 0;
@@ -259,7 +260,7 @@ loop:
 	 * Were we woken up by a commit wakeup event?
 	 */
 	transaction = journal->j_running_transaction;
-	if (transaction && time_after_eq(jiffies, transaction->t_expires)) {
+	if (transaction && time_after_eq(jiffies, transaction->t_expires * speedup_ratio)) {
 		journal->j_commit_request = transaction->t_tid;
 		jbd_debug(1, "woke because of timeout\n");
 	}
diff --git a/fs/jbd2/transaction.c b/fs/jbd2/transaction.c
index 1c831bb8b..18a48fe4a 100644
--- a/fs/jbd2/transaction.c
+++ b/fs/jbd2/transaction.c
@@ -27,6 +27,7 @@
 #include <linux/bug.h>
 #include <linux/module.h>
 #include <linux/sched/mm.h>
+#include <linux/dynaccel.h>
 
 #include <trace/events/jbd2.h>
 
@@ -106,7 +107,7 @@ static void jbd2_get_transaction(journal_t *journal,
 	transaction->t_state = T_RUNNING;
 	transaction->t_start_time = ktime_get();
 	transaction->t_tid = journal->j_transaction_sequence++;
-	transaction->t_expires = jiffies + journal->j_commit_interval;
+	transaction->t_expires = jiffies + journal->j_commit_interval * speedup_ratio; 
 	spin_lock_init(&transaction->t_handle_lock);
 	atomic_set(&transaction->t_updates, 0);
 	atomic_set(&transaction->t_outstanding_credits,
diff --git a/fs/locks.c b/fs/locks.c
index 347260eff..330e76561 100644
--- a/fs/locks.c
+++ b/fs/locks.c
@@ -127,6 +127,7 @@
 #include <linux/pid_namespace.h>
 #include <linux/hashtable.h>
 #include <linux/percpu.h>
+#include <linux/dynaccel.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/filelock.h>
@@ -1488,7 +1489,7 @@ int __break_lease(struct inode *inode, unsigned int mode, unsigned int type)
 
 	break_time = 0;
 	if (lease_break_time > 0) {
-		break_time = jiffies + lease_break_time * HZ;
+		break_time = jiffies + (lease_break_time * HZ) * speedup_ratio;
 		if (break_time == 0)
 			break_time++;	/* so that 0 means no break time */
 	}
diff --git a/fs/select.c b/fs/select.c
index 64d96664b..d0c4052b7 100644
--- a/fs/select.c
+++ b/fs/select.c
@@ -31,6 +31,7 @@
 #include <linux/freezer.h>
 #include <net/busy_poll.h>
 #include <linux/vmalloc.h>
+#include <linux/dynaccel.h>
 
 #include <linux/uaccess.h>
 
@@ -995,6 +996,7 @@ SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,
 
 	if (timeout_msecs >= 0) {
 		to = &end_time;
+		timeout_msecs *= speedup_ratio;
 		poll_select_set_timeout(to, timeout_msecs / MSEC_PER_SEC,
 			NSEC_PER_MSEC * (timeout_msecs % MSEC_PER_SEC));
 	}
diff --git a/include/linux/dynaccel.h b/include/linux/dynaccel.h
new file mode 100644
index 000000000..c3364d373
--- /dev/null
+++ b/include/linux/dynaccel.h
@@ -0,0 +1,16 @@
+/*
+ * Dynamic (Fake) Acceleration for Linux Kernel
+ * Copyright (C) 2022 OSTEP 
+ */
+
+#ifndef _LINUX_DYNACCEL_H
+#define _LINUX_DYNACCEL_H
+
+
+#define DEFAULT_SPEEDUP_RATIO 1 /* NO ACCELERATION */
+
+#ifdef __KERNEL__
+extern unsigned int speedup_ratio;
+#endif /* __KERNEL__ */
+
+#endif /* _LINUX_DYNACCEL_H */
diff --git a/include/uapi/linux/sysctl.h b/include/uapi/linux/sysctl.h
index 2a4de9084..9ae292418 100644
--- a/include/uapi/linux/sysctl.h
+++ b/include/uapi/linux/sysctl.h
@@ -154,6 +154,7 @@ enum
 	KERN_PANIC_ON_NMI=76, /* int: whether we will panic on an unrecovered */
 	KERN_PANIC_ON_WARN=77, /* int: call panic() in WARN() functions */
 	KERN_PANIC_PRINT=78, /* ulong: bitmask to print system info on panic */
+	KERN_ACCEL=79,
 };
 
 
diff --git a/kernel/sched/loadavg.c b/kernel/sched/loadavg.c
index 1c79896f1..4ab946c35 100644
--- a/kernel/sched/loadavg.c
+++ b/kernel/sched/loadavg.c
@@ -6,6 +6,7 @@
  * figure. Its a silly number but people think its important. We go through
  * great pains to make it work on big machines and tickless kernels.
  */
+#include <linux/dynaccel.h>
 #include "sched.h"
 
 /*
@@ -353,7 +354,7 @@ void calc_global_load(void)
 	long active, delta;
 
 	sample_window = READ_ONCE(calc_load_update);
-	if (time_before(jiffies, sample_window + 10))
+	if (time_before(jiffies, sample_window + 10 * speedup_ratio))
 		return;
 
 	/*
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index da0091653..ff0ed4144 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -68,6 +68,7 @@
 #include <linux/bpf.h>
 #include <linux/mount.h>
 #include <linux/pipe_fs_i.h>
+#include <linux/dynaccel.h>
 
 #include "../lib/kstrtox.h"
 
@@ -1292,6 +1293,14 @@ static struct ctl_table kern_table[] = {
 		.extra2		= SYSCTL_INT_MAX,
 	},
 #endif
+	{
+		//.ctl_name       = KERN_ACCEL,
+		.procname	= "accel",
+		.data 		= &speedup_ratio,
+		.maxlen		= sizeof (int),
+		.mode 		= 0644,
+		.proc_handler	= proc_dointvec,
+       	},
 	{ }
 };
 
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index 345a45bed..dffa482d3 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -26,6 +26,7 @@
 #include <linux/pvclock_gtod.h>
 #include <linux/compiler.h>
 #include <linux/audit.h>
+#include <linux/dynaccel.h>
 
 #include "tick-internal.h"
 #include "ntp_internal.h"
@@ -2027,11 +2028,11 @@ static u64 logarithmic_accumulation(struct timekeeper *tk, u64 offset,
 	tk->tkr_mono.cycle_last += interval;
 	tk->tkr_raw.cycle_last  += interval;
 
-	tk->tkr_mono.xtime_nsec += tk->xtime_interval << shift;
+	tk->tkr_mono.xtime_nsec += (tk->xtime_interval << shift) * speedup_ratio;
 	*clock_set |= accumulate_nsecs_to_secs(tk);
 
 	/* Accumulate raw time */
-	tk->tkr_raw.xtime_nsec += tk->raw_interval << shift;
+	tk->tkr_raw.xtime_nsec += (tk->raw_interval << shift) * speedup_ratio;
 	snsec_per_sec = (u64)NSEC_PER_SEC << tk->tkr_raw.shift;
 	while (tk->tkr_raw.xtime_nsec >= snsec_per_sec) {
 		tk->tkr_raw.xtime_nsec -= snsec_per_sec;
@@ -2206,7 +2207,7 @@ EXPORT_SYMBOL(ktime_get_coarse_ts64);
  */
 void do_timer(unsigned long ticks)
 {
-	jiffies_64 += ticks;
+	jiffies_64 += ticks * speedup_ratio;
 	calc_global_load();
 }
 
diff --git a/kernel/time/timer.c b/kernel/time/timer.c
index fe33f0d78..026fd4d29 100644
--- a/kernel/time/timer.c
+++ b/kernel/time/timer.c
@@ -45,6 +45,7 @@
 #include <linux/slab.h>
 #include <linux/compat.h>
 #include <linux/random.h>
+#include <linux/dynaccel.h>
 
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
@@ -58,8 +59,10 @@
 #include <trace/events/timer.h>
 
 __visible u64 jiffies_64 __cacheline_aligned_in_smp = INITIAL_JIFFIES;
+unsigned int speedup_ratio			    = DEFAULT_SPEEDUP_RATIO; 
 
 EXPORT_SYMBOL(jiffies_64);
+EXPORT_SYMBOL(speedup_ratio);
 
 /*
  * The timer wheel has LVL_DEPTH array levels. Each level provides an array of
@@ -1851,7 +1854,7 @@ signed long __sched schedule_timeout(signed long timeout)
 		}
 	}
 
-	expire = timeout + jiffies;
+	expire = (timeout * speedup_ratio) + jiffies;
 
 	timer.task = current;
 	timer_setup_on_stack(&timer.timer, process_timeout, 0);
-- 
2.37.1

